// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Infrastructure;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("backend.Domain.Container", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("capacityVolumeFt3")
                        .HasColumnType("REAL");

                    b.Property<float>("capacityVolumeM3")
                        .HasColumnType("REAL");

                    b.Property<float>("capacityWeightKg")
                        .HasColumnType("REAL");

                    b.Property<float>("capacityWeightLb")
                        .HasColumnType("REAL");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("backend.Domain.PortMarker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("lat")
                        .HasColumnType("REAL");

                    b.Property<float>("lng")
                        .HasColumnType("REAL");

                    b.Property<int>("portStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("portType")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("portStateId");

                    b.ToTable("PortMarkers");
                });

            modelBuilder.Entity("backend.Domain.PortState", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("lat")
                        .HasColumnType("REAL");

                    b.Property<float>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("PortState");
                });

            modelBuilder.Entity("backend.Domain.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Containerid")
                        .HasColumnType("INTEGER");

                    b.Property<float>("height")
                        .HasColumnType("REAL");

                    b.Property<float>("length")
                        .HasColumnType("REAL");

                    b.Property<int>("measureUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("quantity")
                        .HasColumnType("INTEGER");

                    b.Property<float>("volume")
                        .HasColumnType("REAL");

                    b.Property<float>("volumeTotal")
                        .HasColumnType("REAL");

                    b.Property<float>("weight")
                        .HasColumnType("REAL");

                    b.Property<float>("weightTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("weightUnit")
                        .HasColumnType("INTEGER");

                    b.Property<float>("width")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("Containerid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("backend.Models.Visitor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("companyCNPJ")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ramoAtividade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("backend.Domain.PortMarker", b =>
                {
                    b.HasOne("backend.Domain.PortState", "portState")
                        .WithMany()
                        .HasForeignKey("portStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("portState");
                });

            modelBuilder.Entity("backend.Domain.Product", b =>
                {
                    b.HasOne("backend.Domain.Container", null)
                        .WithMany("products")
                        .HasForeignKey("Containerid");
                });

            modelBuilder.Entity("backend.Domain.Container", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
